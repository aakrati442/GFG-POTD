class Solution
{
    public:
    //Function to sort an array using quick sort algorithm.
    void quickSort(int arr[], int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high); // Get the partition index
            quickSort(arr, low, pi - 1); // Sort elements before the partition index
            quickSort(arr, pi + 1, high); // Sort elements after the partition index
        }
    }

    public:
    int partition(int arr[], int low, int high) {
        int pivot = arr[high]; // Select the pivot element
        int i = (low - 1); // Index of smaller element
    
        for (int j = low; j <= high - 1; j++) {
            // If current element is smaller than or equal to pivot
            if (arr[j] <= pivot) {
                i++; // Increment index of smaller element
                std::swap(arr[i], arr[j]); // Swap arr[i] and arr[j]
            }
        }
        std::swap(arr[i + 1], arr[high]); // Place the pivot element in its correct position
        return (i + 1); // Return the index of the pivot element
    }
};
