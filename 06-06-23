public static void find(Node root,int key)
{
    if(root==null)
    return;
    if(root.data>pre.data && root.data<key)
    pre=root;
    if(root.data<suc.data && root.data>key)
    suc=root;
    if(root.data==key)
    {
        find(root.left,key);
        find(root.right,key);
    }
    if(root.data<key)
    find(root.right,key);
    if(root.data>key)
    find(root.left,key);
}
//Function to check whether a Binary Tree is BST or not.
public static void findPreSuc(Node root, int key)
{
    // code here.
    pre=new Node(Integer.MIN_VALUE);
    suc=new Node(Integer.MAX_VALUE);
    find(root,key);
    if(pre.data==Integer.MIN_VALUE)
    pre=null;
    if(suc.data==Integer.MAX_VALUE)
    suc=null;
    // code here.
    
    /* There are two static nodes defined above pre(representing predecessor) and suc(representing successor) as follows:
       static Node pre=null,suc=null
       You need to update these both.
       And the data inside these classes will be printed automatically by the driver code. 
    */
    /* There are two static nodes defined above pre(representing predecessor) and suc(representing successor) as follows:
       static Node pre=null,suc=null
       You need to update these both.
       And the data inside these classes will be printed automatically by the driver code. 
    */
}
